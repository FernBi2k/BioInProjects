setwd("C:\Users\vanos\OneDrive\Documents")
setwd("C:/Users/vanos/OneDrive/Documents")
getwd()
utils:::menuInstallPkgs()
install.packages("pspline")
library("pspline")
require("ape")
require("pspline")
?
>
?lm
??lm
?lm
?wd
?setwd
32+60
5!
5 x 6
5x6
5*6
log100
log(100)
log10(100)
30==31
32==32
32!=32
40>10
first.object<-c(4,5,6)
second.object=2
first.object
second.object
third.objectc(5,6,7)
third.object<-c(8,9,10)
monkey=c("ooo","eee","ooo")
monkey
?c
10:20
v2=10:20
v2
seq
seq(3,27, by=3)
?seq
seq(3,27, by=1)
seq(1,9, by=pi)
rep(1:4, 2)
rep(c(5,6), 3)
rep(5:6, 5)
rep(4:9,each = 3)
vec1=sample(1:100, 10, replace=FALSE)
vec1
?sample
vec2=sample(1:100,10,replace=FALSE)
vec2
vec1=c(1,67,10,34,47,31,32,99,4,40)
?C
vec1
class(vec1)
mode(vec1)
head(vec1)
tal(vec1)
tail(vec1)
sort(vec1,decreasing=1)
sort(vec1,decreasing=F)
rev(vec1)
sort(vec1,increasing=T)
sort(vec1,increasing=F)
sort(vec1,decreasing=F)
rev(vec1)
table(vec1)
unique(vec1)
vec2=rep(c("a","b","c","d"), 3)
vec2r
vec2
unique(vec2)
?unique
class(vec2)
vec1
vec2
vec1[5]
vec1[-6]
vec1[2:6]
vec1[-2:6]
vec1[-(2:6)]
vec1[vec1<47]
vec1[5] #bracket tells you to find positional value
vec1[5] #bracket tells you to find positional value
vec3=sample(1:100, 10, replace=FALSE)
vec3+vec1
matrix1=matrix(c(3:26),nrow=8,ncol=3,byrow=T)
matrix1
is.matrix(matrix1)
class(matrix1)
mode(matrix1)
head(matrix1)
tail(matrix1)
length(matrix1)
matrix1[5,]
matrix1[2,]
matrix[5,3]
matrix1[5,3]
matrix1[2:6,2:3]
getwd
getwd()
utils:::menuInstallPkgs()
myevens=seq(20:40,by=2)
myevens=seq(20,40,by=2)
myevens
myvec4=c("99","13","54","27","4","65","32","45","81","72")
myvec4
myvec4=c(99,13,54,27,4,65,32,45,81,72)
myvec4
sort(myvec4,decreasing=F)
myvec4[4]
myvec4[-2]
myvec4[-(3:7)]
mtx1=matrix(c(20:40),nrow=10,ncol=4,byrow=T)
mtx1=matrix(c(20:40),nrow=10,ncol=4,byrow=T)
mtx1
mtx1[7,]
mtx1[,2]
mtx1[8,3]
mtx1[2:3,1:2]
q()
lettervec=c(A,C,J,X,Y)
lettervec=c("A,C,J,X,Y")
lettervec
third.object<-c(8,9,10)
third.object
lettervec=c(A,C,J,X,Y)
lettervec
lettervec=c(A,C,J,X,Y)
lettervec= c(A,C,J,X,Y)
?c
lettervec=c("A,C,J,X,Y")
lettervec
sort(lettervec)
sort(lettervec,decreasing=F)
?sort
method = c("auto", "shell", "quick", "radix"), index.return = FALSE)
lettervec=c("A", "C", "J", "X", "Y")
lettervec
lettervec=c(A,C,J,X,Y)
lettervec=c("A",C,J,X,Y")
lettervec
lettervec
lettervec=c("A",C,J,X,Y")
lettervec=c("A,C,J,X,Y")
lettervec
rev(sort(lettervec))
sort(lettervec)
sort(-lettervec)
sort(-(lettervec))
lettervec=c("A","C","J","X",Y")
lettervec
lettervec
lettervec=c("A","C","J","X",Y")
lettervec=c("A","C","J","X","Y")
lettervec
sort(lettervec)
rev(sort(lettervec))
repvec=rep((c(15:20),4)
c(15:20)
repvec=rep((c(15:20), 4)
repvec=rep((c(15:20),4)
rep((c(15:20),4)
rep(c("a","b","c","d"), 3)
rep(c(15:20),4)
repvec=rep(c(15:20),4)
repvec
unique(repvec)
vec2=rep(c("a","b","c","d"), 3)
vec2
unique(vec2)
vec15=c(74,53,84,52,98,6,61,64,99,93,42,72,65,14,59)
vec15
vec15[11]
lettervec=c("A","C","J","X","Y")
lettervec
repvec
vec15
vec15[3:13]
vec15[-(4:8)]
shortvec=vec15[-(4:8)]
shortvec
vec15[vec15<65]
mtx2=matrix(c(15:46), nrow= 8,ncol= 4, byrow=TRUE)
mtx2
mtx2[6,]
mtx2[,3]
mtx2[6,3]
smallmtx<-mtx2[2:6, 2:4]
smallmtx
smallmtx<-mtx2[3:7,2:4]
smallmtx
q()
#what does this do
bg_table = texpr(bg_filt, 'all')
library(ballgown)
library(RColorBrewer)
library(genefilter)
library(dplyr)
library(devtools)
bg_table = texpr(bg_filt, 'all')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ballgown")
pheno_data<-data.frame(ids = c("plank01", "plank02", "biofilm01", "biofilm02"),
stage = c("planktonic", "planktonic", "biofilm", "biofilm"))
#this makes a data frame titled "pheno_data" using the the data from "plank01", "plank02", "biofilm01", "biofilm02"
samples.c <- paste('ballgown', pheno_data$ids, sep = '/')
bg<-ballgown(samples = samples.c,meas='all',pData=pheno_data)
bg
bg_filt = subset(bg,"rowVars(texpr(bg)) >1",genomesubset=TRUE)
bg_filt
#this code filters the transcripts from the data bg, turning it from a column to a row, then keeps only those rows with variances greater than 1, which is why it went from seeing 5737 transcripts to 5144 transcripts.
bg_filt = subset(bg,"rowVars(texpr(bg)) >1",genomesubset=TRUE)
bg_filt
#this code filters the transcripts from the data bg, turning it from a column to a row, then keeps only those rows with variances greater than 1, which is why it went from seeing 5737 transcripts to 5144 transcripts.
bg_filt = subset(bg,"rowVars(texpr(bg)) >1",genomesubset=TRUE)
bg_filt
#this code filters the transcripts from the data bg, turning it from a column to a row, then keeps only those rows with variances greater than 1, which is why it went from seeing 5737 transcripts to 5144 transcripts.
results_transcripts<- stattest(bg_filt, feature = "transcript", covariate = "stage",
getFC = TRUE, meas = "FPKM")
results_transcripts<-data.frame(geneNames=geneNames(bg_filt),
transcriptNames=transcriptNames(bg_filt), results_transcripts)
#conducts a statistical test and organizes the data frame, Using data set bg_filt, on the transcript level, while taking into account the different stages, and to compute fold changes
results_transcripts[results_transcripts$transcriptNames == "gene-PA0135",]
results_transcripts[results_transcripts$transcriptNames == "gene-PA0135",]
results_transcripts[results_transcripts$transcriptNames == "gene-PA0142",]
sigdiff <- results_transcripts %>% filter(pval<0.05)
dim(sigdiff)
#this filters the data to only include the genes that have a transcript that has a p-val of less than .05, which will show us the ones that have a significance of different expression between planktonic and biofilm
o = order(sigdiff[,"pval"], -abs(sigdiff[,"fc"]), decreasing=FALSE)
output = sigdiff[o,c("geneNames","transcriptNames", "id","fc","pval","qval")]
write.table(output, file="SigDiff.txt", sep="\t", row.names=FALSE, quote=FALSE)
head(output)
#the table is being organized taking into account multiple things: from sigdiff column titled "pval", ones who have a p-val < 0.05., the column titled "fc" or fold changes, and by descending order of the absolute value of fold count of the transcriptome.
#So we have sorting those with significant difference by ascending p-values and descending fold changes.
##########################################################
bg_table = texpr(bg_filt, 'all')
bg_gene_names = unique(bg_table[, 9:10])
gene_expression = as.data.frame(gexpr(bg_filt))
head(gene_expression)
colnames(gene_expression) <- c("plank01", "plank02", "biofilm01", "biofilm02")
head(gene_expression)
dim(gene_expression)
transcript_gene_table = indexes(bg)$t2g
head(transcript_gene_table)
length(row.names(transcript_gene_table))
length(unique(transcript_gene_table[,"g_id"]))
counts=table(transcript_gene_table[,"g_id"])
c_one = length(which(counts == 1))
c_more_than_one = length(which(counts > 1))
c_max = max(counts)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene",
main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one),
paste("Genes with more than one transcript =", c_more_than_one),
paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text, lty=NULL)
x = gene_expression[,"plank01"]
y = gene_expression[,"plank02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Planktonic, Replicate 1)", ylab="FPKM (Planktonic, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "hotpink")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
x = gene_expression[,"biofilm01"]
y = gene_expression[,"biofilm02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Biofilm, Replicate 1)", ylab="FPKM (Biofilm, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "blue")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
results_genes = stattest(bg_filt, feature="gene", covariate="stage", getFC=TRUE, meas="FPKM")
results_genes = merge(results_genes,bg_gene_names,by.x=c("id"),by.y=c("gene_id"))
sig=which(results_genes$pval<0.05)
results_genes[,"de"] = log2(results_genes[,"fc"])
hist(results_genes[sig,"de"], breaks=50, col="seagreen",
xlab="log2(Fold change) Planktonic vs Biofilm",
main="Distribution of differential expression values")
abline(v=-2, col="black", lwd=2, lty=2)
abline(v=2, col="black", lwd=2, lty=2)
legend("topleft", "Fold-change > 4", lwd=2, lty=2)
gene_expression[,"plank"]=apply(gene_expression[,c(1:2)], 1, mean)
gene_expression[,"biofilm"]=apply(gene_expression[,c(3:4)], 1, mean)
x=log2(gene_expression[,"plank"]+min_nonzero)
y=log2(gene_expression[,"biofilm"]+min_nonzero)
plot(x=x, y=y, pch=16, cex=0.25, xlab="Planktonic FPKM (log2)", ylab="Biofilm FPKM (log2)",
main="Planktonic vs Biofilm FPKMs")
abline(a=0, b=1)
xsig=x[sig]
ysig=y[sig]
points(x=xsig, y=ysig, col="magenta", pch=16, cex=0.5)
legend("topleft", "Significant", col="magenta", pch=16)
fpkm = texpr(bg_filt,meas="FPKM")
ballgown::transcriptNames(bg_filt)[2]
ballgown::geneNames(bg_filt)[2]
gene_expression[,"plank"]=apply(gene_expression[,c(1:2)], 1, mean)
gene_expression[,"biofilm"]=apply(gene_expression[,c(3:4)], 1, mean)
x=log2(gene_expression[,"plank"]+min_nonzero)
y=log2(gene_expression[,"biofilm"]+min_nonzero)
plot(x=x, y=y, pch=16, cex=0.25, xlab="Planktonic FPKM (log2)", ylab="Biofilm FPKM (log2)",
main="Planktonic vs Biofilm FPKMs")
abline(a=0, b=1)
xsig=x[sig]
ysig=y[sig]
points(x=xsig, y=ysig, col="magenta", pch=16, cex=0.5)
legend("topleft", "Significant", col="magenta", pch=16)
ballgown::transcriptNames(bg_filt)[2]
ballgown::geneNames(bg_filt)[2]
ballgown::transcriptNames(bg_filt)[4]
ballgown::geneNames(bg_filt)[4]
transformed_fpkm <- log2(fpkm[2, ] + 1)
setwd("C:/Users/vanos/OneDrive/Desktop/BioInProjects/Transcriptome")
fpkm = texpr(bg_filt,meas="FPKM")
ballgown::transcriptNames(bg_filt)[2]
ballgown::geneNames(bg_filt)[2]
ballgown::transcriptNames(bg_filt)[4]
ballgown::geneNames(bg_filt)[4]
transformed_fpkm <- log2(fpkm[2, ] + 1)
numeric_stages <- as.numeric(factor(pheno_data$stage))
jittered_stages <- jitter(numeric_stages)
boxplot(transformed_fpkm ~ pheno_data$stage,
main=paste(ballgown::geneNames(bg_filt)[2], ' : ', ballgown::transcriptNames(bg_filt)[2]),
xlab="Stage",
ylab="log2(FPKM+1)",
col=c("lightblue", "salmon"),
border="darkblue")
points(transformed_fpkm ~ jittered_stages,
pch=21, col="blue", bg="lightblue", cex=1.2)
library(ballgown)
library(RColorBrewer)
library(genefilter)
library(dplyr)
library(devtools)
pheno_data<-data.frame(ids = c("plank01", "plank02", "biofilm01", "biofilm02"),
stage = c("planktonic", "planktonic", "biofilm", "biofilm"))
#this makes a data frame titled "pheno_data" using the the data from "plank01", "plank02", "biofilm01", "biofilm02"
samples.c <- paste('ballgown', pheno_data$ids, sep = '/')
bg<-ballgown(samples = samples.c,meas='all',pData=pheno_data)
bg
bg_filt = subset(bg,"rowVars(texpr(bg)) >1",genomesubset=TRUE)
bg_filt
#this code filters the transcripts from the data bg, turning it from a column to a row, then keeps only those rows with variances greater than 1, which is why it went from seeing 5737 transcripts to 5144 transcripts.
results_transcripts<- stattest(bg_filt, feature = "transcript", covariate = "stage",
getFC = TRUE, meas = "FPKM")
results_transcripts<-data.frame(geneNames=geneNames(bg_filt),
transcriptNames=transcriptNames(bg_filt), results_transcripts)
#conducts a statistical test and organizes the data frame, Using data set bg_filt, on the transcript level, while taking into account the different stages, and to compute fold changes
results_transcripts[results_transcripts$transcriptNames == "gene-PA0135",]
results_transcripts[results_transcripts$transcriptNames == "gene-PA0142",]
sigdiff <- results_transcripts %>% filter(pval<0.05)
dim(sigdiff)
#this filters the data to only include the genes that have a transcript that has a p-val of less than .05, which will show us the ones that have a significance of different expression between planktonic and biofilm
o = order(sigdiff[,"pval"], -abs(sigdiff[,"fc"]), decreasing=FALSE)
output = sigdiff[o,c("geneNames","transcriptNames", "id","fc","pval","qval")]
write.table(output, file="SigDiff.txt", sep="\t", row.names=FALSE, quote=FALSE)
head(output)
#the table is being organized taking into account multiple things: from sigdiff column titled "pval", ones who have a p-val < 0.05., the column titled "fc" or fold changes, and by descending order of the absolute value of fold count of the transcriptome.
#So we have sorting those with significant difference by ascending p-values and descending fold changes.
##########################################################
bg_table = texpr(bg_filt, 'all')
bg_gene_names = unique(bg_table[, 9:10])
gene_expression = as.data.frame(gexpr(bg_filt))
head(gene_expression)
colnames(gene_expression) <- c("plank01", "plank02", "biofilm01", "biofilm02")
head(gene_expression)
dim(gene_expression)
#it renamed the column names of gene_expression
transcript_gene_table = indexes(bg)$t2g
head(transcript_gene_table)
length(row.names(transcript_gene_table))
length(unique(transcript_gene_table[,"g_id"]))
#there are 5737 transcripts and 4715 unique genes
counts=table(transcript_gene_table[,"g_id"])
c_one = length(which(counts == 1))
c_more_than_one = length(which(counts > 1))
c_max = max(counts)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene",
main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one),
paste("Genes with more than one transcript =", c_more_than_one),
paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text, lty=NULL)
x = gene_expression[,"plank01"]
y = gene_expression[,"plank02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Planktonic, Replicate 1)", ylab="FPKM (Planktonic, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "hotpink")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
x = gene_expression[,"biofilm01"]
y = gene_expression[,"biofilm02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Biofilm, Replicate 1)", ylab="FPKM (Biofilm, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "blue")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
results_genes = stattest(bg_filt, feature="gene", covariate="stage", getFC=TRUE, meas="FPKM")
results_genes = merge(results_genes,bg_gene_names,by.x=c("id"),by.y=c("gene_id"))
sig=which(results_genes$pval<0.05)
results_genes[,"de"] = log2(results_genes[,"fc"])
hist(results_genes[sig,"de"], breaks=50, col="seagreen",
xlab="log2(Fold change) Planktonic vs Biofilm",
main="Distribution of differential expression values")
abline(v=-2, col="black", lwd=2, lty=2)
abline(v=2, col="black", lwd=2, lty=2)
legend("topleft", "Fold-change > 4", lwd=2, lty=2)
gene_expression[,"plank"]=apply(gene_expression[,c(1:2)], 1, mean)
gene_expression[,"biofilm"]=apply(gene_expression[,c(3:4)], 1, mean)
x=log2(gene_expression[,"plank"]+min_nonzero)
y=log2(gene_expression[,"biofilm"]+min_nonzero)
plot(x=x, y=y, pch=16, cex=0.25, xlab="Planktonic FPKM (log2)", ylab="Biofilm FPKM (log2)",
main="Planktonic vs Biofilm FPKMs")
abline(a=0, b=1)
xsig=x[sig]
ysig=y[sig]
points(x=xsig, y=ysig, col="magenta", pch=16, cex=0.5)
legend("topleft", "Significant", col="magenta", pch=16)
fpkm = texpr(bg_filt,meas="FPKM")
ballgown::transcriptNames(bg_filt)[2]
ballgown::geneNames(bg_filt)[2]
ballgown::transcriptNames(bg_filt)[4]
ballgown::geneNames(bg_filt)[4]
transformed_fpkm <- log2(fpkm[2, ] + 1)
numeric_stages <- as.numeric(factor(pheno_data$stage))
jittered_stages <- jitter(numeric_stages)
boxplot(transformed_fpkm ~ pheno_data$stage,
main=paste(ballgown::geneNames(bg_filt)[2], ' : ', ballgown::transcriptNames(bg_filt)[2]),
xlab="Stage",
ylab="log2(FPKM+1)",
col=c("lightblue", "salmon"),
border="darkblue")
points(transformed_fpkm ~ jittered_stages,
pch=21, col="blue", bg="lightblue", cex=1.2)
